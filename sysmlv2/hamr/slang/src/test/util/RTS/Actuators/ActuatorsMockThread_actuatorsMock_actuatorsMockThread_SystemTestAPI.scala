// #Sireum

package RTS.Actuators

import org.sireum._
import art._
import RTS.SystemTestSuiteSlang.runtimeMonitorStream
import RTS._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object ActuatorsMockThread_actuatorsMock_actuatorsMockThread_SystemTestAPI {
  /** helper method to set the values of all incoming ports
    * @param api_ports_saturationActuate incoming data port
    * @param api_ports_tempPressureActuate incoming data port
    */
  def put_concrete_inputs(api_ports_saturationActuate: Base_Types.Boolean,
                          api_ports_tempPressureActuate: Base_Types.Boolean): Unit = {
    put_ports_saturationActuate(api_ports_saturationActuate)
    put_ports_tempPressureActuate(api_ports_tempPressureActuate)
  }

  // setter for incoming data port
  def put_ports_saturationActuate(value: Base_Types.Boolean): Unit = {
    Art.insertInInfrastructurePort(Arch.rts_actuatorsMock_actuatorsMockThread.operational_api.ports_saturationActuate_Id, Base_Types.Boolean_Payload(value))
  }

  // setter for incoming data port
  def put_ports_tempPressureActuate(value: Base_Types.Boolean): Unit = {
    Art.insertInInfrastructurePort(Arch.rts_actuatorsMock_actuatorsMockThread.operational_api.ports_tempPressureActuate_Id, Base_Types.Boolean_Payload(value))
  }

  def fetchContainer(): RTS.Actuators.ActuatorsMockThread_actuatorsMock_actuatorsMockThread_PostState_Container_PS = {
    if (runtimeMonitorStream.contains(Arch.rts_actuatorsMock_actuatorsMockThread.id)) {
      val (_, postContainer_) = runtimeMonitorStream.get(Arch.rts_actuatorsMock_actuatorsMockThread.id).get
      return postContainer_.asInstanceOf[RTS.Actuators.ActuatorsMockThread_actuatorsMock_actuatorsMockThread_PostState_Container_PS]
    }
    else {
      assert(F, s"No post state recorded for ${Arch.rts_actuatorsMock_actuatorsMockThread.name}")
      halt(s"No post state recorded for ${Arch.rts_actuatorsMock_actuatorsMockThread.name}")
    }
  }

  def check_concrete_outputs(): Unit = {
    var failureReasons: ISZ[ST] = ISZ()


    assert(failureReasons.isEmpty, st"${(failureReasons, "\n")}".render)
  }


}