// #Sireum
package RTS.runtimemonitor

import org.sireum._
import RTS._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object ModelInfo {
  val CoincidenceLogic_actuationSubsystem_actuationUnit1_temperatureLogic_coincidenceLogic_MI : Component =
    Component(
      name = "CoincidenceLogic_actuationSubsystem_actuationUnit1_temperatureLogic_coincidenceLogic",
      id = Arch.rts_actuationSubsystem_actuationUnit1_temperatureLogic_coincidenceLogic.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "ports_channel1",
          id = Arch.rts_actuationSubsystem_actuationUnit1_temperatureLogic_coincidenceLogic.ports_channel1.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel2",
          id = Arch.rts_actuationSubsystem_actuationUnit1_temperatureLogic_coincidenceLogic.ports_channel2.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel3",
          id = Arch.rts_actuationSubsystem_actuationUnit1_temperatureLogic_coincidenceLogic.ports_channel3.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel4",
          id = Arch.rts_actuationSubsystem_actuationUnit1_temperatureLogic_coincidenceLogic.ports_channel4.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_actuate",
          id = Arch.rts_actuationSubsystem_actuationUnit1_temperatureLogic_coincidenceLogic.ports_actuate.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val CoincidenceLogic_actuationSubsystem_actuationUnit1_pressureLogic_coincidenceLogic_MI : Component =
    Component(
      name = "CoincidenceLogic_actuationSubsystem_actuationUnit1_pressureLogic_coincidenceLogic",
      id = Arch.rts_actuationSubsystem_actuationUnit1_pressureLogic_coincidenceLogic.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "ports_channel1",
          id = Arch.rts_actuationSubsystem_actuationUnit1_pressureLogic_coincidenceLogic.ports_channel1.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel2",
          id = Arch.rts_actuationSubsystem_actuationUnit1_pressureLogic_coincidenceLogic.ports_channel2.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel3",
          id = Arch.rts_actuationSubsystem_actuationUnit1_pressureLogic_coincidenceLogic.ports_channel3.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel4",
          id = Arch.rts_actuationSubsystem_actuationUnit1_pressureLogic_coincidenceLogic.ports_channel4.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_actuate",
          id = Arch.rts_actuationSubsystem_actuationUnit1_pressureLogic_coincidenceLogic.ports_actuate.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val CoincidenceLogic_actuationSubsystem_actuationUnit1_saturationLogic_coincidenceLogic_MI : Component =
    Component(
      name = "CoincidenceLogic_actuationSubsystem_actuationUnit1_saturationLogic_coincidenceLogic",
      id = Arch.rts_actuationSubsystem_actuationUnit1_saturationLogic_coincidenceLogic.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "ports_channel1",
          id = Arch.rts_actuationSubsystem_actuationUnit1_saturationLogic_coincidenceLogic.ports_channel1.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel2",
          id = Arch.rts_actuationSubsystem_actuationUnit1_saturationLogic_coincidenceLogic.ports_channel2.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel3",
          id = Arch.rts_actuationSubsystem_actuationUnit1_saturationLogic_coincidenceLogic.ports_channel3.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel4",
          id = Arch.rts_actuationSubsystem_actuationUnit1_saturationLogic_coincidenceLogic.ports_channel4.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_actuate",
          id = Arch.rts_actuationSubsystem_actuationUnit1_saturationLogic_coincidenceLogic.ports_actuate.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val OrLogic_actuationSubsystem_actuationUnit1_tempPressureTripOut_orLogic_MI : Component =
    Component(
      name = "OrLogic_actuationSubsystem_actuationUnit1_tempPressureTripOut_orLogic",
      id = Arch.rts_actuationSubsystem_actuationUnit1_tempPressureTripOut_orLogic.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "ports_channel1",
          id = Arch.rts_actuationSubsystem_actuationUnit1_tempPressureTripOut_orLogic.ports_channel1.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel2",
          id = Arch.rts_actuationSubsystem_actuationUnit1_tempPressureTripOut_orLogic.ports_channel2.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_actuate",
          id = Arch.rts_actuationSubsystem_actuationUnit1_tempPressureTripOut_orLogic.ports_actuate.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val CoincidenceLogic_actuationSubsystem_actuationUnit2_temperatureLogic_coincidenceLogic_MI : Component =
    Component(
      name = "CoincidenceLogic_actuationSubsystem_actuationUnit2_temperatureLogic_coincidenceLogic",
      id = Arch.rts_actuationSubsystem_actuationUnit2_temperatureLogic_coincidenceLogic.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "ports_channel1",
          id = Arch.rts_actuationSubsystem_actuationUnit2_temperatureLogic_coincidenceLogic.ports_channel1.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel2",
          id = Arch.rts_actuationSubsystem_actuationUnit2_temperatureLogic_coincidenceLogic.ports_channel2.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel3",
          id = Arch.rts_actuationSubsystem_actuationUnit2_temperatureLogic_coincidenceLogic.ports_channel3.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel4",
          id = Arch.rts_actuationSubsystem_actuationUnit2_temperatureLogic_coincidenceLogic.ports_channel4.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_actuate",
          id = Arch.rts_actuationSubsystem_actuationUnit2_temperatureLogic_coincidenceLogic.ports_actuate.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val CoincidenceLogic_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic_MI : Component =
    Component(
      name = "CoincidenceLogic_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic",
      id = Arch.rts_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "ports_channel1",
          id = Arch.rts_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic.ports_channel1.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel2",
          id = Arch.rts_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic.ports_channel2.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel3",
          id = Arch.rts_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic.ports_channel3.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel4",
          id = Arch.rts_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic.ports_channel4.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_actuate",
          id = Arch.rts_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic.ports_actuate.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val CoincidenceLogic_actuationSubsystem_actuationUnit2_saturationLogic_coincidenceLogic_MI : Component =
    Component(
      name = "CoincidenceLogic_actuationSubsystem_actuationUnit2_saturationLogic_coincidenceLogic",
      id = Arch.rts_actuationSubsystem_actuationUnit2_saturationLogic_coincidenceLogic.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "ports_channel1",
          id = Arch.rts_actuationSubsystem_actuationUnit2_saturationLogic_coincidenceLogic.ports_channel1.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel2",
          id = Arch.rts_actuationSubsystem_actuationUnit2_saturationLogic_coincidenceLogic.ports_channel2.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel3",
          id = Arch.rts_actuationSubsystem_actuationUnit2_saturationLogic_coincidenceLogic.ports_channel3.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel4",
          id = Arch.rts_actuationSubsystem_actuationUnit2_saturationLogic_coincidenceLogic.ports_channel4.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_actuate",
          id = Arch.rts_actuationSubsystem_actuationUnit2_saturationLogic_coincidenceLogic.ports_actuate.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val OrLogic_actuationSubsystem_actuationUnit2_tempPressureTripOut_orLogic_MI : Component =
    Component(
      name = "OrLogic_actuationSubsystem_actuationUnit2_tempPressureTripOut_orLogic",
      id = Arch.rts_actuationSubsystem_actuationUnit2_tempPressureTripOut_orLogic.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "ports_channel1",
          id = Arch.rts_actuationSubsystem_actuationUnit2_tempPressureTripOut_orLogic.ports_channel1.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel2",
          id = Arch.rts_actuationSubsystem_actuationUnit2_tempPressureTripOut_orLogic.ports_channel2.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_actuate",
          id = Arch.rts_actuationSubsystem_actuationUnit2_tempPressureTripOut_orLogic.ports_actuate.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val OrLogic_actuationSubsystem_tempPressureActuatorUnit_actuateTempPressureActuator_orLogic_MI : Component =
    Component(
      name = "OrLogic_actuationSubsystem_tempPressureActuatorUnit_actuateTempPressureActuator_orLogic",
      id = Arch.rts_actuationSubsystem_tempPressureActuatorUnit_actuateTempPressureActuator_orLogic.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "ports_channel1",
          id = Arch.rts_actuationSubsystem_tempPressureActuatorUnit_actuateTempPressureActuator_orLogic.ports_channel1.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel2",
          id = Arch.rts_actuationSubsystem_tempPressureActuatorUnit_actuateTempPressureActuator_orLogic.ports_channel2.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_actuate",
          id = Arch.rts_actuationSubsystem_tempPressureActuatorUnit_actuateTempPressureActuator_orLogic.ports_actuate.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val Actuator_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator_MI : Component =
    Component(
      name = "Actuator_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator",
      id = Arch.rts_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "ports_input",
          id = Arch.rts_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator.ports_input.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_manualActuatorInput",
          id = Arch.rts_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator.ports_manualActuatorInput.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_output",
          id = Arch.rts_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator.ports_output.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val OrLogic_actuationSubsystem_saturationActuatorUnit_actuateSaturationActuator_orLogic_MI : Component =
    Component(
      name = "OrLogic_actuationSubsystem_saturationActuatorUnit_actuateSaturationActuator_orLogic",
      id = Arch.rts_actuationSubsystem_saturationActuatorUnit_actuateSaturationActuator_orLogic.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "ports_channel1",
          id = Arch.rts_actuationSubsystem_saturationActuatorUnit_actuateSaturationActuator_orLogic.ports_channel1.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_channel2",
          id = Arch.rts_actuationSubsystem_saturationActuatorUnit_actuateSaturationActuator_orLogic.ports_channel2.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_actuate",
          id = Arch.rts_actuationSubsystem_saturationActuatorUnit_actuateSaturationActuator_orLogic.ports_actuate.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val Actuator_actuationSubsystem_saturationActuatorUnit_saturationActuator_actuator_MI : Component =
    Component(
      name = "Actuator_actuationSubsystem_saturationActuatorUnit_saturationActuator_actuator",
      id = Arch.rts_actuationSubsystem_saturationActuatorUnit_saturationActuator_actuator.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "ports_input",
          id = Arch.rts_actuationSubsystem_saturationActuatorUnit_saturationActuator_actuator.ports_input.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_manualActuatorInput",
          id = Arch.rts_actuationSubsystem_saturationActuatorUnit_saturationActuator_actuator.ports_manualActuatorInput.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_output",
          id = Arch.rts_actuationSubsystem_saturationActuatorUnit_saturationActuator_actuator.ports_output.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val InstrumentationMockThread_instrumentationMock_instrumentationMockThread_MI : Component =
    Component(
      name = "InstrumentationMockThread_instrumentationMock_instrumentationMockThread",
      id = Arch.rts_instrumentationMock_instrumentationMockThread.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "ports_unit1_temperatureLogic_channel1",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit1_temperatureLogic_channel1.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit1_temperatureLogic_channel2",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit1_temperatureLogic_channel2.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit1_temperatureLogic_channel3",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit1_temperatureLogic_channel3.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit1_temperatureLogic_channel4",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit1_temperatureLogic_channel4.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit1_pressureLogic_channel1",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit1_pressureLogic_channel1.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit1_pressureLogic_channel2",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit1_pressureLogic_channel2.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit1_pressureLogic_channel3",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit1_pressureLogic_channel3.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit1_pressureLogic_channel4",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit1_pressureLogic_channel4.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit1_saturationLogic_channel1",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit1_saturationLogic_channel1.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit1_saturationLogic_channel2",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit1_saturationLogic_channel2.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit1_saturationLogic_channel3",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit1_saturationLogic_channel3.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit1_saturationLogic_channel4",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit1_saturationLogic_channel4.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit2_temperatureLogic_channel1",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit2_temperatureLogic_channel1.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit2_temperatureLogic_channel2",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit2_temperatureLogic_channel2.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit2_temperatureLogic_channel3",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit2_temperatureLogic_channel3.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit2_temperatureLogic_channel4",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit2_temperatureLogic_channel4.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit2_pressureLogic_channel1",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit2_pressureLogic_channel1.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit2_pressureLogic_channel2",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit2_pressureLogic_channel2.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit2_pressureLogic_channel3",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit2_pressureLogic_channel3.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit2_pressureLogic_channel4",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit2_pressureLogic_channel4.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit2_saturationLogic_channel1",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit2_saturationLogic_channel1.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit2_saturationLogic_channel2",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit2_saturationLogic_channel2.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit2_saturationLogic_channel3",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit2_saturationLogic_channel3.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_unit2_saturationLogic_channel4",
          id = Arch.rts_instrumentationMock_instrumentationMockThread.ports_unit2_saturationLogic_channel4.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val EventControlMockThread_eventControlMock_eventControlMockThread_MI : Component =
    Component(
      name = "EventControlMockThread_eventControlMock_eventControlMockThread",
      id = Arch.rts_eventControlMock_eventControlMockThread.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "ports_manualActuatorInput1",
          id = Arch.rts_eventControlMock_eventControlMockThread.ports_manualActuatorInput1.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "ports_manualActuatorInput2",
          id = Arch.rts_eventControlMock_eventControlMockThread.ports_manualActuatorInput2.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.Out,
          slangType = "")))

  val ActuatorsMockThread_actuatorsMock_actuatorsMockThread_MI : Component =
    Component(
      name = "ActuatorsMockThread_actuatorsMock_actuatorsMockThread",
      id = Arch.rts_actuatorsMock_actuatorsMockThread.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "ports_tempPressureActuate",
          id = Arch.rts_actuatorsMock_actuatorsMockThread.ports_tempPressureActuate.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "ports_saturationActuate",
          id = Arch.rts_actuatorsMock_actuatorsMockThread.ports_saturationActuate.id.toZ,
          kind = PortKind.Data,
          direction = StateDirection.In,
          slangType = "")))

  val modelInfo: ModelInfo =
    ModelInfo(ISZ(
     CoincidenceLogic_actuationSubsystem_actuationUnit1_temperatureLogic_coincidenceLogic_MI,
     CoincidenceLogic_actuationSubsystem_actuationUnit1_pressureLogic_coincidenceLogic_MI,
     CoincidenceLogic_actuationSubsystem_actuationUnit1_saturationLogic_coincidenceLogic_MI,
     OrLogic_actuationSubsystem_actuationUnit1_tempPressureTripOut_orLogic_MI,
     CoincidenceLogic_actuationSubsystem_actuationUnit2_temperatureLogic_coincidenceLogic_MI,
     CoincidenceLogic_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic_MI,
     CoincidenceLogic_actuationSubsystem_actuationUnit2_saturationLogic_coincidenceLogic_MI,
     OrLogic_actuationSubsystem_actuationUnit2_tempPressureTripOut_orLogic_MI,
     OrLogic_actuationSubsystem_tempPressureActuatorUnit_actuateTempPressureActuator_orLogic_MI,
     Actuator_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator_MI,
     OrLogic_actuationSubsystem_saturationActuatorUnit_actuateSaturationActuator_orLogic_MI,
     Actuator_actuationSubsystem_saturationActuatorUnit_saturationActuator_actuator_MI,
     InstrumentationMockThread_instrumentationMock_instrumentationMockThread_MI,
     EventControlMockThread_eventControlMock_eventControlMockThread_MI,
     ActuatorsMockThread_actuatorsMock_actuatorsMockThread_MI))
}

@datatype class ModelInfo(val components: ISZ[Component])

@datatype class Component(val name: String,
                          val id: Z,
                          val dispatchProtocol: iDispatchProtocol.Type,
                          val state: ISZ[StateElement])

@enum object iDispatchProtocol {
  "Sporadic"
  "Periodic"
}

@enum object StateDirection {
  "In"
  "Out"
}

@sig trait StateElement {
  def name: String

  def id: Z

  def slangType: String

  def direction: StateDirection.Type
}

@enum object PortKind {
  "Data"
  "Event"
  "EventData"
}

@datatype class Port(val name: String,
                     val id: Z,
                     val kind: PortKind.Type,
                     val direction: StateDirection.Type,
                     val slangType: String) extends StateElement

@datatype class StateVariable(val name: String,
                              val id: Z,
                              val direction: StateDirection.Type,
                              val slangType: String) extends StateElement
