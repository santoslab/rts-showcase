// #Sireum

package RTS.Actuation

import org.sireum._
import art._
import RTS._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object CoincidenceLogic_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic_EntryPoint_Companion {

  var last_api_ports_actuate: Option[Base_Types.Boolean] = None()

  /** get the value of outgoing data port ports_actuate.  If a 'fresh' value wasn't sent
    * during the last dispatch then return last_api_ports_actuate.get.
    * Note: this requires outgoing data ports to be initialized during the
    * initialization phase or prior to system testing.
    */
  def get_api_ports_actuate: Base_Types.Boolean = {
    Art.observeOutPortVariable(Arch.rts_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic.operational_api.ports_actuate_Id) match {
      case Some(Base_Types.Boolean_Payload(value)) =>
        last_api_ports_actuate = Some(value)
        return value
      case _ if last_api_ports_actuate.isEmpty =>
        assert(F, "No value found on outgoing data port ports_actuate.\n                  Note: values placed during the initialization phase will persist across dispatches")
        halt("No value found on outgoing data port ports_actuate.\n                  Note: values placed during the initialization phase will persist across dispatches")
      case _ => return last_api_ports_actuate.get
    }
  }
  var preStateContainer_wL: Option[CoincidenceLogic_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic_PreState_Container_PS] = None()

  def pre_initialise(): Unit = {
    // assume/require contracts cannot refer to incoming ports or
    // state variables so nothing to do here
  }

  def post_initialise(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      CoincidenceLogic_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic_PostState_Container_PS(
        api_ports_actuate = get_api_ports_actuate)

    // the rest can now be performed via a different thread
    RTS.runtimemonitor.RuntimeMonitor.observeInitialisePostState(Arch.rts_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic.id, RTS.runtimemonitor.ObservationKind.rts_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic_postInit, postStateContainer_wL)
  }

  def pre_compute(): Unit = {
    // block the component while its pre-state values are retrieved
    preStateContainer_wL = Some(
      CoincidenceLogic_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic_PreState_Container_PS(
        api_ports_channel1 = Art.observeInPortVariable(Arch.rts_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic.operational_api.ports_channel1_Id).get.asInstanceOf[Base_Types.Boolean_Payload].value, 
        api_ports_channel2 = Art.observeInPortVariable(Arch.rts_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic.operational_api.ports_channel2_Id).get.asInstanceOf[Base_Types.Boolean_Payload].value, 
        api_ports_channel3 = Art.observeInPortVariable(Arch.rts_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic.operational_api.ports_channel3_Id).get.asInstanceOf[Base_Types.Boolean_Payload].value, 
        api_ports_channel4 = Art.observeInPortVariable(Arch.rts_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic.operational_api.ports_channel4_Id).get.asInstanceOf[Base_Types.Boolean_Payload].value))

    // the rest can now be performed via a different thread
    RTS.runtimemonitor.RuntimeMonitor.observeComputePreState(Arch.rts_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic.id, RTS.runtimemonitor.ObservationKind.rts_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic_preCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]])
  }

  def post_compute(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      CoincidenceLogic_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic_PostState_Container_PS(
        api_ports_actuate = get_api_ports_actuate)

    // the rest can now be performed via a different thread
    RTS.runtimemonitor.RuntimeMonitor.observeComputePrePostState(Arch.rts_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic.id, RTS.runtimemonitor.ObservationKind.rts_actuationSubsystem_actuationUnit2_pressureLogic_coincidenceLogic_postCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]], postStateContainer_wL)
  }
}