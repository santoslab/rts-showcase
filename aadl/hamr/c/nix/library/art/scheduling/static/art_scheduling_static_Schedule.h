#ifndef SIREUM_H_art_scheduling_static_Schedule
#define SIREUM_H_art_scheduling_static_Schedule

#ifdef __cplusplus
extern "C" {
#endif

#include <types.h>

void art_scheduling_static_Schedule_init(STACK_FRAME_ONLY);

art_scheduling_static_Schedule_DScheduleSpec art_scheduling_static_Schedule_emptyDScheduleSpec(STACK_FRAME_ONLY);
art_scheduling_static_Schedule_DScheduleSpec art_scheduling_static_Schedule_dScheduleSpec(STACK_FRAME_ONLY);
void art_scheduling_static_Schedule_dScheduleSpec_a(STACK_FRAME art_scheduling_static_Schedule_DScheduleSpec p_dScheduleSpec);
IS_FDDCB6 art_scheduling_static_Schedule_domainToBridgeIdMap(STACK_FRAME_ONLY);
void art_scheduling_static_Schedule_domainToBridgeIdMap_a(STACK_FRAME IS_FDDCB6 p_domainToBridgeIdMap);

Unit art_scheduling_static_Schedule_setSchedule(STACK_FRAME art_scheduling_static_Schedule_DScheduleSpec spec, IS_FDDCB6 domainsToBridgeMap);

B art_scheduling_static_Schedule_validDScheduleSpec(STACK_FRAME art_scheduling_static_Schedule_DScheduleSpec dScheduleSpec);

Z art_scheduling_static_Schedule_getDomainFromScheduleState(STACK_FRAME art_scheduling_static_Explorer_ScheduleState scheduleState);

art_Art_BridgeId art_scheduling_static_Schedule_getBridgeIdFromScheduleState(STACK_FRAME art_scheduling_static_Explorer_ScheduleState scheduleState);

void art_scheduling_static_Schedule_threadNickName(STACK_FRAME String result, art_Art_BridgeId bridgeId);

B art_scheduling_static_Schedule_checkMaxDomain(STACK_FRAME art_scheduling_static_Schedule_DScheduleSpec dScheduleSpec);

B art_scheduling_static_Schedule_checkNoMissingDomain(STACK_FRAME art_scheduling_static_Schedule_DScheduleSpec dScheduleSpec);

B art_scheduling_static_Schedule_checkHyperPeriodTicks(STACK_FRAME art_scheduling_static_Schedule_DScheduleSpec dScheduleSpec);

Z art_scheduling_static_Schedule_getDomainFromSlotNum(STACK_FRAME Z slotNum);

art_Art_BridgeId art_scheduling_static_Schedule_getBridgeIdFromSlotNumber(STACK_FRAME Z slotNum);

void art_scheduling_static_Schedule_computeElaspedRemainingHPTicks(STACK_FRAME Tuple2_EC3B57 result, Z slotNum, art_scheduling_static_Schedule_DScheduleSpec dScheduleSpec);

art_Art_BridgeId art_scheduling_static_Schedule_getBridgeIdFromSlot(STACK_FRAME art_scheduling_static_Schedule_Slot slot);

void art_scheduling_static_Schedule_getThreadNickNameFromScheduleState(STACK_FRAME String result, art_scheduling_static_Explorer_ScheduleState scheduleState);

void art_scheduling_static_Schedule_init_emptyDScheduleSpec(STACK_FRAME_ONLY);

void art_scheduling_static_Schedule_init_dScheduleSpec(STACK_FRAME_ONLY);

void art_scheduling_static_Schedule_init_domainToBridgeIdMap(STACK_FRAME_ONLY);

#ifdef __cplusplus
}
#endif

#endif