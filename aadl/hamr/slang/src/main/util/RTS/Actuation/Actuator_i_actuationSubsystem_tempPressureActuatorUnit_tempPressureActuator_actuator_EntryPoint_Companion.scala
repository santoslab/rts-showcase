// #Sireum

package RTS.Actuation

import org.sireum._
import art._
import RTS._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object Actuator_i_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator_EntryPoint_Companion {

  var last_api_output: Option[Base_Types.Boolean] = None()

  /** get the value of outgoing data port output.  If a 'fresh' value wasn't sent
    * during the last dispatch then return last_api_output.get.
    * Note: this requires outgoing data ports to be initialized during the
    * initialization phase or prior to system testing.
    */
  def get_api_output: Base_Types.Boolean = {
    Art.observeOutPortVariable(Arch.RTS_i_Instance_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator.operational_api.output_Id) match {
      case Some(Base_Types.Boolean_Payload(value)) =>
        last_api_output = Some(value)
        return value
      case _ if last_api_output.isEmpty =>
        assert(F, "No value found on outgoing data port output.\n                  Note: values placed during the initialization phase will persist across dispatches")
        halt("No value found on outgoing data port output.\n                  Note: values placed during the initialization phase will persist across dispatches")
      case _ => return last_api_output.get
    }
  }
  var preStateContainer_wL: Option[Actuator_i_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator_PreState_Container_PS] = None()

  def pre_initialise(): Unit = {
    // assume/require contracts cannot refer to incoming ports or
    // state variables so nothing to do here
  }

  def post_initialise(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      Actuator_i_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator_PostState_Container_PS(
        api_output = get_api_output)

    // the rest can now be performed via a different thread
    RTS.runtimemonitor.RuntimeMonitor.observeInitialisePostState(Arch.RTS_i_Instance_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator.id, RTS.runtimemonitor.ObservationKind.RTS_i_Instance_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator_postInit, postStateContainer_wL)
  }

  def pre_compute(): Unit = {
    // block the component while its pre-state values are retrieved
    preStateContainer_wL = Some(
      Actuator_i_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator_PreState_Container_PS(
        api_input = Art.observeInPortVariable(Arch.RTS_i_Instance_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator.operational_api.input_Id).get.asInstanceOf[Base_Types.Boolean_Payload].value, 
        api_manualActuatorInput = Art.observeInPortVariable(Arch.RTS_i_Instance_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator.operational_api.manualActuatorInput_Id).get.asInstanceOf[Base_Types.Boolean_Payload].value))

    // the rest can now be performed via a different thread
    RTS.runtimemonitor.RuntimeMonitor.observeComputePreState(Arch.RTS_i_Instance_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator.id, RTS.runtimemonitor.ObservationKind.RTS_i_Instance_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator_preCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]])
  }

  def post_compute(): Unit = {
    // block the component while its post-state values are retrieved
    val postStateContainer_wL =
      Actuator_i_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator_PostState_Container_PS(
        api_output = get_api_output)

    // the rest can now be performed via a different thread
    RTS.runtimemonitor.RuntimeMonitor.observeComputePrePostState(Arch.RTS_i_Instance_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator.id, RTS.runtimemonitor.ObservationKind.RTS_i_Instance_actuationSubsystem_tempPressureActuatorUnit_tempPressureActuator_actuator_postCompute, preStateContainer_wL.asInstanceOf[Option[art.DataContent]], postStateContainer_wL)
  }
}