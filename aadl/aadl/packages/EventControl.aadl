package EventControl
public
	with Base_Types;
	with RTS;

	-- ===========================================================================================================
	--
	--   E v e n t C o n t r o l M o c k T h r e a d     Thread
	--
	--   Notes:
	--     - Test harness for Actuation subsystem corresponding to outputs of Event Control subsystem
	--     - This thread must be enclosed in a process to form a valid AADL system instance (this concept is not present in SysMLv2)
	--     - Only mock up mananualActutorInputs (manual trip) to Actuation.  
	--       Other outputs (e.g., set points and trip mode) needed by Instrumentation are not included.
	-- ===========================================================================================================
	thread EventControlMockThread extends RTS::Periodic_Thread
		features
			-- ==== OUTPUTS ==== 
			-- corresponding to  eventControl.manualActuatorInput[i] (i=1..2) in RTS_Static_Architecture.sysml
			-- Note that the "input" does not refer to the role in this component (the port here is an output port)
			-- but rather that this signal is providing an input to the Actuation sub-system, to manually
			-- activate the tempPressure (manualActuatorInput[1]) and saturation (manualActuatorInput[2]) actuators.
			manualActuatorInput1: out data port Base_Types::Boolean;
			manualActuatorInput2: out data port Base_Types::Boolean;
		-- ==== FLOWS ====
		-- Note: "flow source" indicates that the source of the "information" for the flow
		-- originates inside the component
		flows
			ft_mAI1: flow source manualActuatorInput1;
			ft_mAI2: flow source manualActuatorInput2;
		properties
			Source_Text => ("resources/sel4_only_behavior_code/EventControl/event_control.c");
			Initialize_Entrypoint_Source_Text => "event_control_init";
			Compute_Entrypoint_Source_Text => "event_control_time_triggered";
	end EventControlMockThread;

	thread implementation EventControlMockThread.i
	end EventControlMockThread.i;

	-- ===========================================================================================================
	--
	--   I n s t r u m e n t a t i o n  M o c k  P r o c e s s    P r o c e s s 
	--
	--   Notes:
	--     - Test harness for Actuation subsystem corresponding to outputs of Instrumentation subsystem
	--     - This process encloses a thread with an identical interface.  (Unfortunately), in AADL
	--       "outer" ports declarations in the enclosed component must be repeated in the enclosing component.
	-- ===========================================================================================================
	process EventControlMockProcess
		features
			-- ==== INPUTS ==== 
			-- (none -- this component is part of a test harness for the actuation subsystem)
			--
			-- ==== OUTPUTS ====  
			manualActuatorInput1: out data port Base_Types::Boolean;
			manualActuatorInput2: out data port Base_Types::Boolean;
		-- ==== FLOWS ====
		flows
			f_mAI1: flow source manualActuatorInput1;
			f_mAI2: flow source manualActuatorInput2;
		-- ==== PROPERTIES ====
		properties
			none;
	end EventControlMockProcess;

	process implementation EventControlMockProcess.i
		-- ==== S u b - c o m p o n e n t s ==== 
		subcomponents
			eventControlMockThread: thread EventControlMockThread.i;
		-- ==== C o n n e c t i o n s  ==== 
		connections
			mAI1: port eventControlMockThread.manualActuatorInput1 -> manualActuatorInput1;
			mAI2: port eventControlMockThread.manualActuatorInput2 -> manualActuatorInput2;
		flows
			f_mAI1: flow source eventControlMockThread.ft_mAI1 -> mAI1 -> manualActuatorInput1;
			f_mAI2: flow source eventControlMockThread.ft_mAI2 -> mAI2 -> manualActuatorInput2;
	end EventControlMockProcess.i;

end EventControl;